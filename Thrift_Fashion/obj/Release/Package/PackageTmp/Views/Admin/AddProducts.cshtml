
@model Thrift_Fashion.Models.product
@{
    ViewBag.Title = "AddProducts";
    Layout = "~/Views/Shared/_Dashboard_Index.cshtml";
}


@using (Html.BeginForm("AddProducts", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="row gsap">
        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Add New User</h4>
                    <p class="card-description">
                        Create a new user
                    </p>
                    <form class="forms-sample">
                        <div class="form-group">
                            @Html.LabelFor(model => model.P_Name, htmlAttributes: new { @class = "control-label col-md-2 " })
                            @Html.EditorFor(model => model.P_Name, new { htmlAttributes = new { @class = "form-control inp", required = string.Empty } })
                            @Html.ValidationMessageFor(model => model.P_Name, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.P_Stock, htmlAttributes: new { @class = "control-label col-md-2 " })
                            @Html.EditorFor(model => model.P_Stock, new { htmlAttributes = new { @class = "form-control inp", @type = "number", required = string.Empty } })
                            @Html.ValidationMessageFor(model => model.P_Stock, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.P_Price, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.P_Price, new { htmlAttributes = new { @class = "form-control inp", @type = "number", required = string.Empty } })
                            @Html.ValidationMessageFor(model => model.P_Price, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.P_Discount, htmlAttributes: new { @class = "control-label col-md-2 " })
                            @Html.EditorFor(model => model.P_Discount, new { htmlAttributes = new { @class = "form-control inp", required = string.Empty } })
                            @Html.ValidationMessageFor(model => model.P_Discount, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.P_Discription, htmlAttributes: new { @class = "control-label col-md-2 " })
                            @Html.EditorFor(model => model.P_Discription, new { htmlAttributes = new { @class = "form-control inp", required = string.Empty } })
                            @Html.ValidationMessageFor(model => model.P_Discription, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <img src="~/SiteUpload/man.png" alt="Profile Picture" class="rounded-circle file-image" width="100px" height="100px" />
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.P_Pic, htmlAttributes: new { @class = "control-label col-md-2" })
                            <input type="file" name="file" class="file-upload-default inp">
                            <div class="input-group col-xs-12">
                                <input type="text" class="form-control file-upload-info" accept="image/*" disabled="" placeholder="Upload Image">
                                <span class="input-group-append">
                                    <button class="file-upload-browse btn btn-primary" type="button">Upload</button>
                                </span>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary me-2">Submit</button>
                        <button class="btn btn-light btn-cancel">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

}

<script>

    const btnCancel = document.querySelector('.btn-cancel');

    btnCancel.addEventListener('click', (e) => {
        e.preventDefault();
        const input = document.querySelectorAll('.inp');
        input.forEach((inp) => {
            inp.value = '';
        })
    });

    const fileUploadBtn = document.querySelector('.file-upload-browse');
    const fileInput = document.querySelector('.file-upload-default');
    const fileInfoVal = document.querySelector('.file-upload-info');
    const image = document.querySelector('.file-image');
    fileUploadBtn.addEventListener('click', () => {
        fileInput.click();
    })

    fileInput.addEventListener('change', () => {
        const [file] = fileInput.files
        fileInfoVal.value = fileInput.files[0].name;
        if (fileInput.files) {
            image.src = URL.createObjectURL(file);
        }
    })


</script>